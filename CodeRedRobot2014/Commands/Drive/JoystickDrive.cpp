// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

//TODO: Replace Dummy Values
#define DECEL_DIST .9

#include "JoystickDrive.h"
#include "Math.h"

JoystickDrive::JoystickDrive() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	Requires(Robot::drive);
}

// Called just before this Command runs the first time
void JoystickDrive::Initialize() {
	m_decelActive = false;
	m_initialPower = 0;
}

// Called repeatedly when this Command is scheduled to run
void JoystickDrive::Execute() {
	if(Robot::oi->IsAutoRangeForwards()) // If the button to stop the correct distance from the wall is pressed			
	{ 
		// If we are not decelerating and we're within the distance to begin decelerating
		if(!m_decelActive && fabs(Robot::drive->GetDistanceLong()-DRV_GOAL_DIST) <= DECEL_DIST) {			
			m_initialPower = fabs((Robot::oi->GetYLeft() + Robot::oi->GetYRight()) / 2); // Set initialPower to average of left and right powers
			m_decelActive = true;
		}
		else // We have begun decelerating; apply power according to the formula
		{	// Set power to be the initial power times the percentage of the remaining distance
			double power = m_initialPower * (Robot::drive->GetDistanceLong() - DRV_GOAL_DIST) / DECEL_DIST;
			Robot::drive->TankDrive(power, -power); // Drive forward at calculated power
		}
	}
//	else if (Robot::oi->IsAutoRangeBackwards()) // If the other button to stop the correct distance from the wall is pressed
//	{
//		if (Robot::drive->GetDistanceShort() > MAX_DISTANCE_SHORT) 		// If we're too far away
//			Robot::drive->TankDrive(-.75, .75);							// Drive backwards
//		else if(Robot::drive->GetDistanceShort() < MIN_DISTANCE_SHORT) 	// If we're too close
//			Robot::drive->TankDrive(.75, -.75); 						// Drive forwards
//		else 															// We're within a good range
//			Robot::drive->TankDrive(0, 0); 								// Stop moving	
//	}
	else
	{
		m_decelActive = false;
		Robot::drive->TankDrive(-Robot::oi->GetYRight(), Robot::oi->GetYLeft()); // Drive with the joystick values
	}	
}

// Make this return true when this Command no longer needs to run execute()
bool JoystickDrive::IsFinished() {
	return false;
}

// Called once after isFinished returns true
void JoystickDrive::End() {
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void JoystickDrive::Interrupted() {

}
