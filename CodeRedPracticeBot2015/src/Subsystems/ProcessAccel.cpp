// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "ProcessAccel.h"
#include "../RobotMap.h"
#include "../Commands/PrintBytes.h"
#include "math.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

ProcessAccel::ProcessAccel() : Subsystem("ProcessAccel") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	sPort = new SerialPort(115200);
	sPort->SetTimeout(0);
	//packet = pdata.packet;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void ProcessAccel::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new PrintBytes());
}

void ProcessAccel::readByte()
{
	sPort->Read((char *)(packet), 1);
	if(!checkStatus())
	{
		sPort->Write((const char*) 0xff, 1);
		readByte();
	}
}

void ProcessAccel::writeByte(const char* byte)
{
	sPort->Write(byte, 1);
}

packet_t* ProcessAccel::getData()
{
	return packet;
}

bool ProcessAccel::checkStatus()
{
	return (packet->tote1 ^
			packet->tote2 ^
			packet->tote3 ^
			packet->tote4 ^
			packet->tote5 == packet->chksum);


}

// Put methods for controlling this subsystem
// here. Call these from Commands.

