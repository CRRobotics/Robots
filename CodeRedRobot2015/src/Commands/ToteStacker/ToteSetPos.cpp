// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ToteSetPos.h"
#define CORRECT_COUNT 10;
#define TOTE_OFFSET 5000; //TODO: Dummy Value Replace
#define CHANGE_TOTE 5000; //TODO: Dummy Value Replace
#define FINAL_CHANGE 2500; //TODO: Dummy Value Replace
#define DROP_START 1000; //TODO: Dummy Value Replace
#define DROP_CHANGE 1000; //TODO: Dummy Value Replace

ToteSetPos::ToteSetPos(StackerActions action, int target):
		m_action(action),
		m_target(target)
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::toteStacker);
	m_currentCount = 0;
	m_targetPos = Robot::toteStacker->GetPos();
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void ToteSetPos::Initialize() {
	Robot::toteStacker->SetBrake(false);
	if(m_action == StackerActions::SET_POS) {
		m_targetPos = m_target;
	}
	else if(m_action == StackerActions::ADD_TOTE) {
		if(Robot::toteStacker->GetTotes() < 5) {
			m_targetPos += CHANGE_TOTE;
			Robot::toteStacker->AddTote();
		}
		else if(Robot::toteStacker->GetTotes() == 5) {
			m_targetPos += FINAL_CHANGE;
			Robot::toteStacker->AddTote();
		}
	}
	else if(m_action == StackerActions::LOWER_TOTE) {
		if(Robot::toteStacker->GetTotes() > 0) {
			m_targetPos -= CHANGE_TOTE;
			Robot::toteStacker->SubtractTote();
		}
	}
	else if(m_action == StackerActions::DROP_TOTES) {
		m_targetPos -= DROP_START;
		m_targetPos -= Robot::toteStacker->GetTotes() * DROP_CHANGE;
	}
}

// Called repeatedly when this Command is scheduled to run
void ToteSetPos::Execute() {
	Robot::toteStacker->SetPos(m_targetPos);
}

// Make this return true when this Command no longer needs to run execute()
bool ToteSetPos::IsFinished() {
	if(Robot::toteStacker->GetCurrentError() > -30 && Robot::toteStacker->GetCurrentError() < 30) {
		m_currentCount ++;
	}
	else {
		m_currentCount = 0;
	}
	return m_currentCount > CORRECT_COUNT;
}

// Called once after isFinished returns true
void ToteSetPos::End() {
	Robot::toteStacker->StopLift();
	Robot::toteStacker->SetBrake(true);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ToteSetPos::Interrupted() {

}
