// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "ToteStacker.h"
#include "../RobotMap.h"
#include "../Commands/ToteStacker/AccelControl.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

ToteStacker::ToteStacker() : Subsystem("ToteStacker") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	toteLift = RobotMap::toteStackertoteLift;
	brake = RobotMap::toteStackerbrake;
	toteHall = RobotMap::toteStackerhall;
	m_relativePosition = 0; //TODO: Replace, Dummy value
	m_toteCount = 0;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void ToteStacker::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new AccelControl());
}

int ToteStacker::GetCurrentError() {
	return toteLift->GetClosedLoopError();
}

bool ToteStacker::IsAtHome() {
	return !toteLift->GetReverseLimitOK();
}

void ToteStacker::SetBrake(bool braked) {
	brake->Set(braked);
}

void ToteStacker::SetPos(int position) {
	toteLift->Set(position + m_relativePosition);
}

void ToteStacker::ZeroToteStacker() {
	toteLift->SetPosition(0);
}

int ToteStacker::GetPos() {
	return toteLift->GetEncPosition();
}

void ToteStacker::StopLift() {
	toteLift->StopMotor();
}

void ToteStacker::SetRelative(int position) {
	m_relativePosition = position;
}

int ToteStacker::GetRelative() {
	return m_relativePosition;
}

void ToteStacker::AddTote() {
	m_toteCount ++;
}

void ToteStacker::SubtractTote() {
	if(m_toteCount > 0) {
		m_toteCount --;
	}
}

void ToteStacker::ZeroTotes() {
	m_toteCount = 0;
}

int ToteStacker::GetTotes() {
	return m_toteCount;
}

bool ToteStacker::Hall() {
	return toteHall->Get();
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

