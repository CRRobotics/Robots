// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
CANTalon* RobotMap::drivelDrive = NULL;
CANTalon* RobotMap::driverDrive = NULL;
CANTalon* RobotMap::drivecDrive = NULL;
Ultrasonic* RobotMap::drivelSonic = NULL;
Ultrasonic* RobotMap::driverSonic = NULL;
AnalogInput* RobotMap::drivelIR = NULL;
AnalogInput* RobotMap::driverIR = NULL;
CANTalon* RobotMap::acquisitionlAcquisition = NULL;
CANTalon* RobotMap::acquisitionrAcquisition = NULL;
Solenoid* RobotMap::acquisitionacqArm = NULL;
CANTalon* RobotMap::toteStackertoteLift = NULL;
Solenoid* RobotMap::toteStackerbrake = NULL;
Encoder* RobotMap::toteStackertoteEnc = NULL;
DigitalInput* RobotMap::toteStackertoteHome = NULL;
CANTalon* RobotMap::containerStackercontainerLift = NULL;
Solenoid* RobotMap::containerStackerclaw = NULL;
Encoder* RobotMap::containerStackercontainerEnc = NULL;
DigitalInput* RobotMap::containerStackercontainerHome = NULL;
AnalogInput* RobotMap::containerStackerclawIR = NULL;
CANTalon* RobotMap::wingswingRetracter = NULL;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	drivelDrive = new CANTalon(8);
	
	
	driverDrive = new CANTalon(5);
	
	
	drivecDrive = new CANTalon(4);
	
	
	drivelSonic = new Ultrasonic(6, 7);
	lw->AddSensor("Drive", "lSonic", drivelSonic);
	
	driverSonic = new Ultrasonic(8, 9);
	lw->AddSensor("Drive", "rSonic", driverSonic);
	
	drivelIR = new AnalogInput(0);
	lw->AddSensor("Drive", "lIR", drivelIR);
	
	driverIR = new AnalogInput(1);
	lw->AddSensor("Drive", "rIR", driverIR);
	
	acquisitionlAcquisition = new CANTalon(2);
	
	
	acquisitionrAcquisition = new CANTalon(3);
	
	
	acquisitionacqArm = new Solenoid(0, 2);
	lw->AddActuator("Acquisition", "acqArm", acquisitionacqArm);
	
	toteStackertoteLift = new CANTalon(7);
	
	
	toteStackerbrake = new Solenoid(0, 1);
	lw->AddActuator("ToteStacker", "brake", toteStackerbrake);
	
	toteStackertoteEnc = new Encoder(10, 11, false, Encoder::k4X);
	lw->AddSensor("ToteStacker", "toteEnc", toteStackertoteEnc);
	toteStackertoteEnc->SetDistancePerPulse(1.0);
        toteStackertoteEnc->SetPIDSourceParameter(Encoder::kRate);
	toteStackertoteHome = new DigitalInput(0);
	lw->AddSensor("ToteStacker", "toteHome", toteStackertoteHome);
	
	containerStackercontainerLift = new CANTalon(6);
	
	
	containerStackerclaw = new Solenoid(0, 3);
	lw->AddActuator("ContainerStacker", "claw", containerStackerclaw);
	
	containerStackercontainerEnc = new Encoder(1, 2, false, Encoder::k4X);
	lw->AddSensor("ContainerStacker", "containerEnc", containerStackercontainerEnc);
	containerStackercontainerEnc->SetDistancePerPulse(1.0);
        containerStackercontainerEnc->SetPIDSourceParameter(Encoder::kRate);
	containerStackercontainerHome = new DigitalInput(3);
	lw->AddSensor("ContainerStacker", "containerHome", containerStackercontainerHome);
	
	containerStackerclawIR = new AnalogInput(2);
	lw->AddSensor("ContainerStacker", "clawIR", containerStackerclawIR);
	
	wingswingRetracter = new CANTalon(9);
	
	

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
