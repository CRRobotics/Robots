// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
#include "Arm.h"
#include "../Robotmap.h"
#include "../Commands/Arm/ArmPosition.h"
#include <math.h>

#define ELBOW_SHUTOFF_ENABLE 0
#define WRIST_SHUTOFF_ENABLE 0

#define ELBOW_EPSILON 0.01f
#define WRIST_EPSILON 0.01f
#define ELBOW_SHUTOFF_THRESH 0.22f
#define ELBOW_SHUTOFF_DELTA  0.05f
#define WRIST_SHUTOFF_THRESH 0.83f
#define WRIST_SHUTOFF_DELTA  0.05f

Arm::Arm() : Subsystem("Arm"),
			 m_bWristActive(false),
			 m_bElbowActive(false)
{
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	wrist = RobotMap::armWrist;
	elbow = RobotMap::armElbow;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	wrist->DisableControl();
	elbow->DisableControl();
}
    
void Arm::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	SetDefaultCommand(new ArmPosition(ARM_POS_STOW_EL, ARM_POS_STOW_WR));
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
void Arm::SetWrist(double pos)
{
#if WRIST_SHUTOFF_ENABLE
	if (pos < WRIST_SHUTOFF_THRESH && wrist->GetPosition() < WRIST_SHUTOFF_THRESH + WRIST_SHUTOFF_DELTA)
	{
		wrist->DisableControl();
		m_bWristActive = false;
	}
	else if (!m_bWristActive)
	{
		wrist->EnableControl();
		m_bWristActive = true;
	}
#endif // WRIST_SHUTOFF_ENABLE

	wrist->Set(pos);
}
void Arm::SetElbow(double pos)
{
#if ELBOW_SHUTOFF_ENABLE
	if (pos < ELBOW_SHUTOFF_THRESH && elbow->GetPosition() < ELBOW_SHUTOFF_THRESH + ELBOW_SHUTOFF_DELTA)
	{
		elbow->DisableControl();
		m_bElbowActive = false;
	}
	else if (!m_bElbowActive)
	{
		elbow->EnableControl();
		m_bElbowActive = true;
	}
#endif // ELBOW_SHUTOFF_ENABLE
	
	elbow->Set(pos);
}

bool Arm::IsElbowAtSetpoint()
{
	return fabs(elbow->GetPosition() - elbow->Get()) < ELBOW_EPSILON;
}
bool Arm::IsWristAtSetpoint()
{
	return fabs(wrist->GetPosition() - wrist->Get()) < WRIST_EPSILON;
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
